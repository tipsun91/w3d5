// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().
const keypress = require('keypress');

const Hero      = require('./game-models/Hero');
const Enemy     = require('./game-models/Enemy');
const Boomerang = require('./game-models/Boomerang');
const Obstacle  = require('./game-models/Obstacle');
const View      = require('./View');

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.

class Game {
  #frame         = 1;    // current frame
  #second        = 1000; // ms
  #frameDuration = 40;   // ms
  #fps           = 25;   // frames per second
  #weaponSpeed   = 2;
  #enemySpeed    = 5;    // frames per move
  #obstacleSpeed = 8;    // frames per move
  #gameTime      = 0;
  #heroAction    = null;
  heroScore      = 0;
  #effect        = 'üí•';

  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.boomerang   = new Boomerang();
    this.hero        = new Hero(this.boomerang); // –ì–µ—Ä–æ—é –º–æ–∂–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –±—É–º–µ—Ä–∞–Ω–≥.
    this.enemy       = new Enemy(trackLength);
    this.obstacle    = new Obstacle(trackLength);
    this.view        = new View(this);
    this.track       = [];
    this.regenerateTrack();
  }

  getFrame() {
    return this.#frame;
  }

  getEnemySpeed() {
    return this.#enemySpeed;
  }

  gameTime() {
    return this.#gameTime += Math.floor(this.#frame * this.#frameDuration / this.#second);
  }

  nextFrame() {
    if (this.#frame === this.#fps) {
      this.#frame = 1;
    } else {
      this.#frame += 1;
    }
  }

  #keyboard = {
    a: (game) => {
      if (game.hero.position > 0) {
        game.hero.moveLeft();
      }
    },
    d: (game) => {
      if (game.hero.position < game.trackLength) {
        game.hero.moveRight();
      }
    },
    w: (game) => {
      if (game.hero.floor === 1) {
        game.hero.jump();
      }
    },
    space: (game) => {
      game.hero.attack();
    }
  };

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if (this.hero.jumpFramesTimer > 0) {
      this.hero.jumpFramesTimer -= 1;
    } else {
      this.hero.floor = 1;
    }

    this.track    = new Array(2);
    this.track[0] = new Array(this.trackLength).fill('  '); // –∫–ª–µ—Ç–∫–∞ –≤ 2 –ø—Ä–æ–±–µ–ª–∞, —Ç.–∫. emoji –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–æ–≤–Ω–æ 2 –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞
    this.track[1] = [].concat(this.track[0]);

    if (this.boomerang.position && [this.boomerang.position, this.boomerang.position + 1, this.boomerang.position - 1].includes(this.enemy.position)) {
      this.track[1][this.enemy.position] = this.#effect;
    } else {
      this.track[1][this.enemy.position] = this.enemy.skin;
    }

    if (this.boomerang.position !== null) {
      this.track[1][this.boomerang.position] = this.boomerang.skin;
      if (this.#frame % this.#weaponSpeed === 0) {
        this.boomerang.position += 1;
      }
    }

    if (this.obstacle.position !== null) {
      this.track[1][this.obstacle.position] = this.obstacle.skin;
    }

    if (!this.enemy.position || this.enemy.position <= 0) {
      this.enemy = new Enemy(this.trackLength);
    }

    // New
    if (!this.obstacle.position || this.obstacle.position <= 0) {
      this.obstacle = new Obstacle(this.trackLength);
    }

    this.track[this.hero.floor][this.hero.position] = this.hero.skin;
  }

  check() {
    if (this.hero.floor === 1 && (this.hero.position === this.enemy.position || this.hero.position === this.obstacle.position)) {
      this.hero.die();
    }

    if (this.boomerang.position === this.enemy.position) {
      this.enemy.die();
      this.heroScore += 1;
      this.boomerang.position = null;
    }

    if (this.boomerang.position === this.trackLength || this.boomerang.position === this.obstacle.position) {
      this.boomerang.position = null;
    }

    switch (this.heroScore) {
      case 3:
          this.#enemySpeed = 4;
        break;
      case 5:
          this.#enemySpeed = 3;
        break;
      case 8:
          this.#enemySpeed = 2;
        break;
      case 10:
          this.#enemySpeed = 1;
        break;
      default:
          // none;
        break;
    }
  }

  play() {
    this.runInteractiveConsole();
    setInterval(() => {
      this.check();
      if (this.#heroAction !== null) { this.#heroAction(this); }
      if (this.#frame % this.#enemySpeed === 0) { this.enemy.moveLeft(); }
      if (this.#frame % this.#obstacleSpeed === 0) { this.obstacle.moveLeft(); }
      this.regenerateTrack();
      this.view.render();
      this.nextFrame();
      this.#heroAction = null;
    }, this.#frameDuration);
  }

  runInteractiveConsole() {
    keypress(process.stdin);
    process.stdin.on('keypress', (ch, key) => {
      if (key) {
        // –í—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        if (key.name in this.#keyboard && this.#heroAction === null) {
          this.#heroAction = this.#keyboard[key.name];
        }
        // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        if (key.ctrl && key.name === 'c') {
          process.exit();
        }
      }
    });
    process.stdin.setRawMode(true);
  }
}

module.exports = Game;
